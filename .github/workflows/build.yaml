name: Build and Release
run-name: ${{ github.actor }} is building and releasing the latest version


on:
  push:
    branches:
      - master

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        env:
          NODE_ENV: development
        run: npm install

      - name: Get current version
        id: get_version
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Build project
        run: npm run make

      - name: Find latest asset
        id: find_latest_asset
        run: |
          asset_path=$(ls -t ./out/make/*.*.*.zip | head -n1)
          echo "::set-output name=asset_path::$asset_path"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            const assetPath = '${{ steps.find_latest_asset.outputs.asset_path }}';
            const assetName = 'hoseki-admin.zip';
            const assetContentType = 'application/zip';
            const octokit = github.getOctokit('${{ secrets.GITHUB_TOKEN }}');
            const releaseId = '${{ steps.create_release.outputs.id }}';

            const uploadUrl = `https://uploads.github.com/repos/${{ github.repository }}/releases/${releaseId}/assets?name=${encodeURIComponent(assetName)}`;
            const assetData = fs.readFileSync(path.resolve(assetPath));
            await octokit.request(uploadUrl, {
              method: 'POST',
              headers: {
                'Content-Type': assetContentType,
                'Content-Length': assetData.length,
              },
              data: assetData,
            });

      - name: Publish Release
        run: |
          curl \
            -X PATCH \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }} \
            -d '{"draft": false}'