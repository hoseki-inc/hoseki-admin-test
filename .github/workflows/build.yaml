name: Build and Release
run-name: ${{ github.actor }} is building and releasing the latest version

on:
  push:
    branches:
      - master

jobs:
  build_and_release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci

      - name: Get current version
        id: get_version
        run: echo "::set-output name=version::$(node -p "require('./package.json').version")"

      - name: Build project
        run: npm run build

      - name: Find latest asset
        id: find_latest_asset
        run: |
          latest_file=$(ls -t ../../out/make/* | head -n1)
          echo "::set-output name=asset_path::$latest_file"

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        id: upload_asset
        run: |
          asset_path=${{ steps.find_latest_asset.outputs.asset_path }}
          asset_name=hoseki-admin.zip
          asset_content_type=application/zip

          echo "Uploading asset: $asset_path"

          upload_url=$(curl -s -X POST \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: $(file -b --mime-type $asset_path)" \
            --upload-file $asset_path \
            "https://uploads.github.com/repos/${{ github.repository }}/releases/${{ steps.create_release.outputs.id }}/assets?name=$asset_name" \
            | jq -r '.upload_url')

          echo "::set-output name=upload_url::$upload_url"

      - name: Publish Release
        id: publish_release
        uses: actions/github-script@v4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          script: |
            const github = require('@actions/github');
            const octokit = github.getOctokit(process.env.GITHUB_TOKEN);

            octokit.repos.updateRelease({
              owner: github.context.repo.owner,
              repo: github.context.repo.repo,
              release_id: ${{ steps.create_release.outputs.id }},
              draft: false
            });
